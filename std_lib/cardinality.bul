%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% Bule Standard Library 1.0                                            %%%%%%%%%%%%%%
%%%%%%%%%%%%%% Bule Version 4.0.0                                                   %%%%%%%%%%%%%%
%%%%%%%%%%%%%% 2022-02-28                                                           %%%%%%%%%%%%%%
%%%%%%%%%%%%%% Jean Christoph Jung, Valentin Mayer-Eichberger, Abdallah Saffidine   %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% CARDINALITY ENCODINGS %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% INTERFACE

%% Input: `cardinality_var[ID,X]` , ID references this constraints, `var(X)` is a intensional variable defined outside this library. `var(X)` occurs in the cardinality constraints. 
%% Input: `cardinality_constraint[ID,T,C,Impl]`,  `T` is in {leq,geq,eq} and `C` is the bound and Impl the implementation
%% INPUT (OPTIONAL): cardinality_qbf[ID,QL]. QL is the quantor level of the existentially introduced variables. Default: innermost. 
%  OUTPUT: Encoding for the cardinality constraint: X1+X2+X3 ... <T> C. 

%% IMPLEMENTATIONS

%% counter: sequential counters (supports leq,geq,eq)
%% adder: adder networks (supports eq)
%% total: totalilzers (supports eq)

cardinality_constraint[ID,_,_,Impl] :: #ground cardinality_type[ID,Impl]. 
cardinality_constraint[ID,T,C,_]    :: #ground cardinality_bound[ID,T,C]. 

%% DEPENDS ON

% Library index.bul

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% SINZ SEQUENTIAL COUNTER %%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Cardinality encoding for counter 
%
% INTRODUCES: variables counter(ID,I,J)  with range*bound/2

cardinality_type[ID,counter], cardinality_var[ID,X] :: #ground index_input[ID,X].  

index_range[ID,I] :: #ground counter_I[ID,I].
index_range[ID,I] :: #ground counter_I[ID,I-1].

cardinality_type[ID,counter], index_range[ID,J], cardinality_bound[ID,_,C], J <= C :: #ground counter_J[ID,J]. 
cardinality_type[ID,counter], cardinality_bound[ID,_,C], C>0 :: #ground counter_J[ID,C]. 
cardinality_type[ID,counter], cardinality_bound[ID,_,C], C>0 :: #ground counter_J[ID,C+1]. 
 
counter_I[ID,I], counter_J[ID,J], I>=J-2, cardinality_bound[ID,_,C], index_last[ID,N], I-J <= N-C :: 
    #ground counter_IJ[ID,I,J].

counter_IJ[ID,I,J] :: #exists[0] count(ID,I,J).
counter_IJ[ID,I,J] :: #hide count(ID,I,J), ~count(ID,I,J).

counter_IJ[ID,I,J], counter_IJ[ID,I+1,J]                    :: ~count(ID,I,J) | count(ID,I+1,J).
counter_IJ[ID,I,J], index[ID,X,I+1], counter_IJ[ID,I+1,J+1] :: ~var(X) | ~count(ID,I,J) | count(ID,I+1,J+1).

counter_IJ[ID,I,J], counter_IJ[ID,I+1,J+1]                  :: ~count(ID,I+1,J+1) | count(ID,I,J).
index[ID,X,I], counter_IJ[ID,I,J], counter_IJ[ID,I-1,J]     ::  var(X) | ~count(ID,I,J) | count(ID,I-1,J).

cardinality_bound[ID,_,_] :: #ground counter_id[ID]. 
counter_id[ID] ::  count(ID,-1,0). 
counter_id[ID] :: ~count(ID,-1,1). 

cardinality_bound[ID,eq,C] :: #ground cardinality_bound[ID,geq,C],cardinality_bound[ID,leq,C].
cardinality_bound[ID,geq,C], index_last[ID,I] :: count(ID,I,C). 
cardinality_bound[ID,leq,C], index_last[ID,I] :: ~count(ID,I,C+1). 

%%% %% fail if bound cannot be reached
cardinality_bound[ID,geq,C], index_last[ID,N], C>N+1 :: . 

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%% ADDER NETWORKS          %%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 
%% %%% Input:  `cardinality_var[V,X]` and `cardinality_bound[V,C]` where `V` is a name, `X` is a variable occuring in the cardinality constraint, and `C` is the bound.
%%% Output: clauses constraining  `var(X1)+var(X2)+... = C`.

cardinality_type[ID,adder], cardinality_var[ID,X] :: #ground cca[ID], index_input[ID,X].

cca_equal[X,Y] :: var(X) -> var(Y).
cca_equal[X,Y] :: var(X) <- var(Y).

cca_aux[ID,I,K], K > 0 :: #ground cca_aux[ID,I,K-1].
cca_aux[ID,I,K], K > 0 :: #ground cca_aux[ID,I+2**(K-1),K-1].
cca_aux[ID,I,K], K > 0,      index[ID,X,I+2**(K-1)-1] :: #ground cca_equal[X, cca(ID,c,I,K)].
cca_aux[ID,I,K], K > 0, ~index_range[ID,I+2**(K-1)-1] :: ~var(cca(ID,c,I,K)).
cca_aux[ID,I,K], K > 0 :: #ground cca_equal[cca(ID,z,I+K-1,K), cca(ID,c,I+K-1,K)].
cca_aux[ID,I,K], K > 0, index_range[ID,J], 0 <= J <= K-2 :: #ground fullAdder[cca(ID,c,I+J,K),
                                                                            cca(ID,z,I+J,K-1),
                                                                            cca(ID,z,I+2**(K-1)+J,K-1),
                                                                            cca(ID,z,I+J,K),
                                                                            cca(ID,c,I+1+J,K)].

cardinality_bound[ID,eq,C] :: #ground log_input[cca(ID),C].

cca[ID], index_last[ID,N] :: #ground cca_start[ID,1+2//(N+1)].
cca_start[ID,K] :: #ground cca_aux[ID,0,K].

cca_aux[ID,I,K], K > 0, index_range[ID,J], 0 <= J <= K-1 :: #exists[0] var(cca(ID,z,I+J,K)).
cca_aux[ID,I,K], K > 0, index_range[ID,J], 0 <= J <= K-1 :: #exists[0] var(cca(ID,c,I+J,K)).
cca_aux[ID,I,K], K > 0, index_range[ID,J], 0 <= J <= K-1 :: #hide var(cca(ID,z,I+J,K)), ~var(cca(ID,z,I+J,K)).
cca_aux[ID,I,K], K > 0, index_range[ID,J], 0 <= J <= K-1 :: #hide var(cca(ID,c,I+J,K)), ~var(cca(ID,c,I+J,K)).

cca_start[ID,K], index_range[ID,I], I <= K-1,  log_binary[cca(ID),I,1] ::  var(cca(ID,z,I,K)).
cca_start[ID,K], index_range[ID,I], I <= K-1,  log_binary[cca(ID),I,0] :: ~var(cca(ID,z,I,K)).

%%% Input: `fullAdder[I1,I2,I3,O1,O2]`
%%% Output: clauses constraining `var(I1)+var(I2)+var(I3)=2*var(O2)+var(O1)`
%%% Input: `halfAdder[X1,X2,Y1,Y2]`
%%% Output: clauses constraining `var(X1)+var(X2)=2*var(Y2)+var(Y1)`

#ground bit[0], bit[1].
bit[X], bit[Y], bit[Z] :: #ground parity3[X,Y,Z,(X+Y+Z) #mod 2].
bit[X], bit[Y], bit[Z], X+Y+Z >= 2 :: #ground large3[X,Y,Z,1].
bit[X], bit[Y], bit[Z], X+Y+Z <  2 :: #ground large3[X,Y,Z,0].

fullAdder[Y1,Y2,Y3,Z0,Z1], parity3[A,B,C,D] ::
    A==0:~var(Y1) & A==1:var(Y1) &
    B==0:~var(Y2) & B==1:var(Y2) &
    C==0:~var(Y3) & C==1:var(Y3)
 -> D==0:~var(Z0) | D==1:var(Z0).

fullAdder[Y1,Y2,Y3,Z0,Z1], large3[A,B,C,1], parity3[A,B,C,0] :: A==1: var(Y1) & B==1: var(Y2) & C==1: var(Y3) ->  var(Z1).
fullAdder[Y1,Y2,Y3,Z0,Z1], large3[A,B,C,0], parity3[A,B,C,1] :: A==0:~var(Y1) & B==0:~var(Y2) & C==0:~var(Y3) -> ~var(Z1).

halfAdder[Y1,Y2,Z0,Z1], parity3[A,B,0,D] :: A==0:~var(Y1) & A==1:var(Y1) & B==0:~var(Y2) & B==1:var(Y2) -> D==0:~var(Z0) | D==1:var(Z0).

halfAdder[Y1,Y2,Z0,Z1], large3[A,B,0,1], parity3[A,B,0,0] :: A==1: var(Y1) & B==1: var(Y2) ->  var(Z1).
halfAdder[Y1,Y2,Z0,Z1], large3[A,B,0,0], parity3[A,B,0,1] :: A==0:~var(Y1) & B==0:~var(Y2) -> ~var(Z1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% TOTALIZER SORTERS       %%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cardinality_type[ID,total], cardinality_var[ID,X] :: #ground stot[ID].
cardinality_type[ID,total], cardinality_var[ID,X] :: #ground index_input[ID,X].

stot_aux[ID,I,I+1], index[ID,X,I] :: var(X) -> var(stot(ID,1,I)).
stot_aux[ID,I,I+1], index[ID,X,I] :: var(X) <- var(stot(ID,1,I)).
stot_aux[ID,I,K], index_range[ID,J], J==(I+K+1)/2 :: #ground stot_aux[ID,I,J].
stot_aux[ID,I,K], index_range[ID,J], J==(I+K+1)/2 :: #ground stot_aux[ID,J,K].

stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,A], index_range[ID,B], I <= A < J <= B < K, S:=A+B-J :: var(stot(ID,J-I,A)) | var(stot(ID,K-J,B)) <- var(stot(ID,K-I,S+1)).
stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,A], index_range[ID,B], I <= A < J <= B < K, S:=A+B-J :: var(stot(ID,J-I,A)) & var(stot(ID,K-J,B)) -> var(stot(ID,K-I,S)).
stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,A], I <= A < J < K :: var(stot(ID,J-I,A)) <- var(stot(ID,K-I,A)).
stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,A], I <= A < J < K :: var(stot(ID,J-I,A)) -> var(stot(ID,K-I,A+K-J)).
stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,B], I < J <= B < K :: var(stot(ID,K-J,B)) <- var(stot(ID,K-I,B-J+I)).
stot_aux[ID,I,K], J:=(I+K+1)/2, index_range[ID,B], I < J <= B < K :: var(stot(ID,K-J,B)) -> var(stot(ID,K-I,B)).

stot[ID], index_last[ID,N] :: #ground stot_start[ID,N+1].
stot_start[ID,K] :: #ground stot_aux[ID,0,K].

stot_aux[ID,I,K], index_range[ID,J], I <= J < K :: #exists[0] var(stot(ID,K-I,J)).
stot_aux[ID,I,K], index_range[ID,J], I <= J < K :: #hide var(stot(ID,K-I,J)), ~var(stot(ID,K-I,J)).

stot_start[ID,K], cardinality_bound[ID,eq,C], 0 <= C <  K :: ~var(stot(ID,K,K-1-C)).
stot_start[ID,K], cardinality_bound[ID,eq,C], 0 <  C <= K ::  var(stot(ID,K,K-C)).

